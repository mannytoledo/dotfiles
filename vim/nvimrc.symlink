" Enable Syntax highlighting
" filetype on " without this vim emits a zero exit status, later, because of :ft off
" filetype off


set nocompatible  " be iMproved

call plug#begin()

" My Bundles
Plug 'bling/vim-airline'
"Plugin 'Lokaltog/vim-easymotion'
Plug 'mileszs/ack.vim'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'docker/docker' , {'rtp': '/contrib/syntax/vim/'}
" Plug 'skwp/greplace.vim'
" Plug 't9md/vim-chef'
Plug 'myusuf3/numbers.vim'
" Plug 'austintaylor/vim-indentobject'
Plug 'fatih/vim-go'
" Plug 'vim-scripts/kwbdi.vim'
" Plug 'tmhedberg/matchit'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" Plug 'tpope/vim-pastie'
" Plug 'tpope/vim-rake'
" Plug 'altercation/vim-colors-solarized'
Plug 'tpope/vim-surround'
" Plug 'rizzatti/funcoo.vim'
" Plug 'rizzatti/dash.vim'
Plug 'nvie/vim-flake8'
Plug 'scrooloose/syntastic'
" Plug 'rosstimson/bats.vim'
" Plug 'majutsushi/tagbar'
" Plug 'leafgarland/typescript-vim'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
" Plug 'jtratner/vim-flavored-markdown'
" Plug 'nathanaelkane/vim-indent-guides'
" Plug 'christoomey/vim-tmux-navigator'
" Plug 'tpope/vim-vividchalk'
Plug 'elzr/vim-json'
Plug 'git@github.com:SirVer/ultisnips.git'
Plug 'honza/vim-snippets'
" Plug 'Shougo/unite.vim'
Plug 'junegunn/goyo.vim'
" Plug 'mtth/scratch.vim'
" Plug 'amix/vim-zenroom2'
Plug 'junegunn/limelight.vim'
"Plug 'alpaca-tc/vim-unite-watson.vim'
Plug 'ngmy/vim-rubocop'
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh --gocode-completer' }
" Plug 'vim-scripts/DrawIt'

" Languages
" Plug 'kchmck/vim-coffee-script'
" Plug 'tpope/vim-rails'
" Plug 'slim-template/vim-slim'

" Colors
" Plug 'nanotech/jellybeans.vim'
" Plug 'Pychimp/vim-luna'
" Plug 'baskerville/bubblegum'
" Plug 'whatyouhide/vim-gotham'
" Plug 'w0ng/vim-hybrid'
Plug 'flazz/vim-colorschemes'
Plug 'sjl/badwolf'
" Plug 'freeo/vim-kalisi'

call plug#end()
" filetype plugin indent on
" syntax enable

" Various sets to make stuff better
set autoindent
set autoread
set backspace=2        "indent,eol,start
set backupcopy=yes
"set t_vb=
set clipboard=unnamed
set cmdheight=2
set cursorline
set directory-=.
set encoding=utf-8
set expandtab
set formatoptions=qrn1
set ignorecase
set incsearch
set laststatus=2
set list
set listchars=tab:▸\ ,trail:▫
set hidden
set number
set ruler
set scrolloff=3
set shiftwidth=2
set showcmd
set smartindent
set smartcase
set softtabstop=2
set splitright
set switchbuf=useopen
set synmaxcol=400
set tabstop=4
set t_Co=256
set visualbell
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu
set wildmode=longest,list,full

" I don't know what these do but I should find out
set noswapfile
"set nobackup
set undofile
set undodir=~/tmp/vim/undo

" Same here I don't know what these do but I need to figure it out
set showmatch
set incsearch
set hlsearch
set foldlevelstart=0

" Better Completion
set omnifunc=syntaxcomplete#Complete
set complete=.,w,b,u,t
set completeopt+=longest,menuone,preview

" mouse=a will prevent you from copying using the mouse in iterm
" You can still copy if you hold option while selecting
set mouse=a
if exists('$TMUX') "Support resizing in TMUX
  " set ttymouse=xterm2
endif

let mapleader = ','
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <leader>l :Align
nnoremap <leader>a :Ack
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>
nnoremap <leader>t :CtrlP<CR>
nnoremap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
nnoremap <leader>] :TagbarToggle<CR>
nnoremap <leader><space> :call whitespace#strip_trailing()<CR>
nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <leader>c <Plug>Kwbd
nnoremap <silent> <leader>z :Goyo<cr>
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" plugin settings
let g:ctrlp_match_window = 'order:ttb,max:20'
let g:NERDSpaceDelims=1
let g:gitgutter_enabled = 0
let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:vimrubocop_rubocop_cmd = 'bundle exec rubocop '
let g:ycm_path_to_python_interpreter = '/usr/local/bin/python'
let g:ycm_use_ultisnips_completer = 1
let g:UltiSnipsUsePythonVersion = 2
" let g:UltiSnipsExpandTrigger = '<C-x>'
" let g:UltiSnipsJumpForwardTrigger = '<C-x>'
" let g:UltiSnipsJumpBackwardTrigger = '<C-s>'
" let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsExpandTrigger="<C-CR>"
let g:UltiSnipsJumpForwardTrigger="<C-x>"
let g:UltiSnipsJumpBackwardTrigger="<C-c>"
" autocmd BufWritePost *.py call Flake8()

" Limelight and Goyo inteagration
autocmd User GoyoEnter Limelight
autocmd User GoyoLeave Limelight!

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  let g:ackprg = 'ag --nogroup --column'

  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" fdoc is yaml
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml

" vim-flavored-markdown config
augroup markdown
  au!
  au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" extra rails.vim help
autocmd User Rails silent! Rnavcommand decorator      app/decorators            -glob=**/* -suffix=_decorator.rb
autocmd User Rails silent! Rnavcommand observer       app/observers             -glob=**/* -suffix=_observer.rb
autocmd User Rails silent! Rnavcommand feature        features                  -glob=**/* -suffix=.feature
autocmd User Rails silent! Rnavcommand job            app/jobs                  -glob=**/* -suffix=_job.rb
autocmd User Rails silent! Rnavcommand mediator       app/mediators             -glob=**/* -suffix=_mediator.rb
autocmd User Rails silent! Rnavcommand stepdefinition features/step_definitions -glob=**/* -suffix=_steps.rb
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =


" Fix Cursor in TMUX
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

"set nocursorline " don't highlight current line

" keyboard shortcuts
inoremap jj <ESC>

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

" Continue on line 85 in the rest of Dunn's config https://github.com/Attamusc/dotfiles/blob/master/vim/vimrc.symlink#L87

